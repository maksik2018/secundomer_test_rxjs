{"version":3,"sources":["secundomer.module.css","App.js","index.js"],"names":["module","exports","App","useState","sec","setSec","status","setStatus","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","start","useCallback","stop","reset","wait","Date","toISOString","slice","className","s","button","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,OAAS,6B,8LCMZ,SAASC,IACtB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAe,IAAIC,IAQzB,OAPAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACM,QAAXR,GACFD,GAAO,SAACU,GAAD,OAASA,EAAM,UAGrB,WACLN,EAAaO,OACbP,EAAaQ,cAEd,CAACX,IAEJ,IAAMY,EAAQC,uBAAY,WACxBZ,EAAU,SACT,IAEGa,EAAOD,uBAAY,WACvBZ,EAAU,QACVF,EAAO,KACN,IAEGgB,EAAQF,uBAAY,WACxBd,EAAO,KACN,IAEGiB,EAAOH,uBAAY,WACvBZ,EAAU,UACT,IAEH,OACE,gCACE,qCAAQ,IAAIgB,KAAKnB,GAAKoB,cAAcC,MAAM,GAAI,OAC9C,wBAAQC,UAAWC,IAAEC,OAAQC,QAASX,EAAtC,mBAGA,wBAAQQ,UAAWC,IAAEC,OAAQC,QAAST,EAAtC,kBAGA,wBAAQM,UAAWC,IAAEC,OAAQC,QAASR,EAAtC,mBAGA,wBAAQK,UAAWC,IAAEC,OAAQC,QAASP,EAAtC,qBCjDNQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d1345b90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"secundomer_button__1v2nS\"};","import \"./App.css\";\nimport React from \"react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { Subject, interval } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport s from \"./secundomer.module.css\";\n\nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState(\"stop\");\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if (status === \"run\") {\n          setSec((val) => val + 1000);\n        }\n      });\n    return () => {\n      unsubscribe$.next();\n      unsubscribe$.complete();\n    };\n  }, [status]);\n\n  const start = useCallback(() => {\n    setStatus(\"run\");\n  }, []);\n\n  const stop = useCallback(() => {\n    setStatus(\"stop\");\n    setSec(0);\n  }, []);\n\n  const reset = useCallback(() => {\n    setSec(0);\n  }, []);\n\n  const wait = useCallback(() => {\n    setStatus(\"wait\");\n  }, []);\n\n  return (\n    <div>\n      <span> {new Date(sec).toISOString().slice(11, 19)}</span>\n      <button className={s.button} onClick={start}>\n        Start\n      </button>\n      <button className={s.button} onClick={stop}>\n        Stop\n      </button>\n      <button className={s.button} onClick={reset}>\n        Reset\n      </button>\n      <button className={s.button} onClick={wait}>\n        Wait\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}