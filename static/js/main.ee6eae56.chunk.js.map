{"version":3,"sources":["secundomer.module.css","App.js","index.js"],"names":["module","exports","App","useState","sec","setSec","status","setStatus","waitDoubleClick$","Subject","pipe","buffer","debounceTime","map","item","length","filter","subscribe","useEffect","timer$","Observable","observer","count","intervalId","setInterval","next","console","log","clearInterval","val","error","complete","subscription","unsubscribe","className","s","watch","Date","toISOString","slice","button","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,OAAS,6B,sNCM9C,SAASC,IACtB,MAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KAmBMC,EAAmB,IAAIC,IA6C7B,OA3CAD,EACGE,KACCC,YAAOH,EAAiBE,KAAKE,YAAa,OAC1CC,aAAI,SAACC,GAAD,OAAUA,EAAKC,UACnBC,aAAO,SAACF,GAAD,OAAmB,IAATA,MAElBG,WAAU,WACTV,EAAU,WAEdW,qBAAU,WACR,GAAe,QAAXZ,EAAkB,CACpB,IAAMa,EAAS,IAAIC,KAAW,SAACC,GAC7B,IAAIC,EAAQ,EACNC,EAAaC,aAAY,WAC7BH,EAASI,KAAMH,GAAS,GACxBI,QAAQC,IAAIL,KACX,KAEH,OAAO,WACLM,cAAcL,OAGZF,EAAW,CACfI,KAAM,WACJpB,GAAO,SAACwB,GAAD,OAASA,EAAM,QAExBC,MAAO,WACLJ,QAAQC,IAAI,UAEdI,SAAU,WACRL,QAAQC,IAAI,uBAGVK,EAAeb,EAAOF,UAAUI,GACtC,OAAO,WACLW,EAAaC,eAGF,UAAX3B,GACFC,EAAU,SAEX,CAACD,IAGF,sBAAK4B,UAAWC,IAAEC,MAAlB,UACE,qCAAQ,IAAIC,KAAKjC,GAAKkC,cAAcC,MAAM,GAAI,OAC9C,wBAAQL,UAAWC,IAAEK,OAAQC,QAjEnB,WACZlC,EAAU,QAgER,mBAGA,wBAAQ2B,UAAWC,IAAEK,OAAQC,QAhEpB,WACXlC,EAAU,QACVF,EAAO,IA8DL,kBAGA,wBAAQ6B,UAAWC,IAAEK,OAAQC,QA9DnB,WACZpC,EAAO,IA6DL,mBAGA,wBAAQ6B,UAAWC,IAAEK,OAAQC,QA7DpB,WACXjC,EAAiBiB,QA4Df,qBC/ENiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ee6eae56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"watch\":\"secundomer_watch__2G7tY\",\"button\":\"secundomer_button__1v2nS\"};","import \"./App.css\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Subject, Observable } from \"rxjs\";\nimport { buffer, map, debounceTime, filter } from \"rxjs/operators\";\nimport s from \"./secundomer.module.css\";\n\nexport default function App() {\n  const [sec, setSec] = useState(0);\n  const [status, setStatus] = useState(\"stop\");\n\n  const start = () => {\n    setStatus(\"run\");\n  };\n\n  const stop = () => {\n    setStatus(\"stop\");\n    setSec(0);\n  };\n\n  const reset = () => {\n    setSec(0);\n  };\n\n  const wait = () => {\n    waitDoubleClick$.next();\n  };\n\n  const waitDoubleClick$ = new Subject();\n\n  waitDoubleClick$\n    .pipe(\n      buffer(waitDoubleClick$.pipe(debounceTime(300))),\n      map((item) => item.length),\n      filter((item) => item === 2)\n    )\n    .subscribe(() => {\n      setStatus(\"wait\");\n    });\n  useEffect(() => {\n    if (status === \"run\") {\n      const timer$ = new Observable((observer) => {\n        let count = 0;\n        const intervalId = setInterval(() => {\n          observer.next((count += 1));\n          console.log(count);\n        }, 1000);\n\n        return () => {\n          clearInterval(intervalId);\n        };\n      });\n      const observer = {\n        next: () => {\n          setSec((val) => val + 1000);\n        },\n        error: () => {\n          console.log(\"error\");\n        },\n        complete: () => {\n          console.log(\"observer complete\");\n        },\n      };\n      const subscription = timer$.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n      };\n    }\n    if (status === \"reset\") {\n      setStatus(\"run\");\n    }\n  }, [status]);\n\n  return (\n    <div className={s.watch}>\n      <span> {new Date(sec).toISOString().slice(11, 19)}</span>\n      <button className={s.button} onClick={start}>\n        Start\n      </button>\n      <button className={s.button} onClick={stop}>\n        Stop\n      </button>\n      <button className={s.button} onClick={reset}>\n        Reset\n      </button>\n      <button className={s.button} onClick={wait}>\n        Wait\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}